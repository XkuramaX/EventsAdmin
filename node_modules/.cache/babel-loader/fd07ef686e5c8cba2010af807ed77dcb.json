{"ast":null,"code":"var _jsxFileName = \"/Users/akashaki/personalProjects/AdminPanel/src/components/events/Register.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport config from '../../config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Register({\n  event,\n  setEvent\n}) {\n  _s();\n\n  console.log(\"i am here\");\n  let form2 = useRef(null);\n  let user = JSON.parse(localStorage.getItem(\"user\"));\n  const [details, setDetails] = useState({});\n  const [image, setImage] = useState();\n\n  const handleImageUpload = event => {\n    console.log(\"inside onChange!\");\n    const files = event.target.files;\n    console.log(files[0]);\n    const formData = new FormData();\n    formData.append('imgFile', files[0]);\n  };\n\n  let imageUrl = config.baseUrl + \"/api/images\";\n\n  let imageSubmitHandler = e => {\n    console.log(\"current form:\", e.target.imgFIle);\n    let formData = new FormData(e.target);\n    e.target.imgFile.value = null; // console.log(formData, \"here is the form\")\n\n    e.preventDefault();\n    console.log(\"This is here\", details);\n    postImageData(imageUrl + \"/create\", formData).then(async response => {\n      console.log(\"akashaki ::\", response);\n\n      if (response.success) {\n        console.log(\"response\");\n        setImage(response.response._id);\n      } else {\n        console.log(response);\n        console.log(\"Cannot create\");\n      }\n    });\n  };\n\n  let postImageData = async (url, formData) => {\n    console.log(formData);\n    let response = await fetch(url, {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'include', // include, *same-origin, omit\n      headers: {\n        //   'Content-Type': 'multipart/form-data',\n        \"Authorization\": JSON.parse(user.accesstoken) //   'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: formData\n    });\n    let resp = await response.json();\n    return resp;\n  };\n\n  let transactionUrl = config.baseUrl + \"/api/transactions\";\n  let eventUrl = config.baseUrl + \"/api/events\";\n\n  let submitHandler = async () => {\n    let data = {\n      member: user.id,\n      image: image._id\n    };\n    let response = await fetch(transactionUrl + \"/create\", {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'include', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": JSON.parse(user.accesstoken) //   'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (response.success) {\n      const registration = {\n        member: user.id,\n        transaction: response.response._id,\n        confirm: false\n      };\n      let registrations = [];\n      event.registrations.forEach(registration => {\n        registrations.push(registration);\n      });\n      registrations.push(registration);\n      data = {\n        registrations: registrations\n      };\n      response = await fetch(eventUrl + \"/\" + event._id, {\n        method: 'PUT',\n        // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors',\n        // no-cors, *cors, same-origin\n        cache: 'no-cache',\n        // *default, no-cache, reload, force-cache, only-if-cached\n        // credentials: 'include', // include, *same-origin, omit\n        headers: {\n          'Content-Type': 'application/json',\n          \"Authorization\": JSON.parse(user.accesstoken) //   'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: JSON.stringify(data)\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Please pay \", event.price, \" in the below UPI link and attach screenshot to register\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"upi://pay?pa=\" + event.upiId,\n        children: event.upiId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"user\",\n      ref: form2,\n      onSubmit: imageSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"imgFile\",\n          className: \"form-control-user\",\n          id: \"exampleInputEmail\",\n          \"aria-describedby\": \"emailHelp\",\n          onChange: event => handleImageUpload(event),\n          placeholder: \"Enter Service Name...\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onSubmit: imageSubmitHandler,\n        className: \"btn btn-primary btn-user btn-block\",\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"user2\",\n      onSubmit: submitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onSubmit: submitHandler,\n        className: \"btn btn-primary btn-user btn-block\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Register, \"bGfWyoDmlktOcwoTlfFkraKbOe4=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/akashaki/personalProjects/AdminPanel/src/components/events/Register.js"],"names":["useRef","useState","config","Register","event","setEvent","console","log","form2","user","JSON","parse","localStorage","getItem","details","setDetails","image","setImage","handleImageUpload","files","target","formData","FormData","append","imageUrl","baseUrl","imageSubmitHandler","e","imgFIle","imgFile","value","preventDefault","postImageData","then","response","success","_id","url","fetch","method","mode","cache","headers","accesstoken","body","resp","json","transactionUrl","eventUrl","submitHandler","data","member","id","stringify","registration","transaction","confirm","registrations","forEach","push","price","upiId"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\nimport config from '../../config.json'\n\nfunction Register ({event, setEvent}) {\n    console.log(\"i am here\")\n    let form2 = useRef(null)\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    const [details, setDetails] = useState({});\n    const [image, setImage] = useState();\n    \n    \n    const handleImageUpload = event => {\n        console.log(\"inside onChange!\")\n        const files = event.target.files\n        console.log(files[0])\n        const formData = new FormData()\n        formData.append('imgFile', files[0])\n      }\n    \n    \n    let imageUrl = config.baseUrl+\"/api/images\"\n    \n    \n    let imageSubmitHandler = (e) => {\n        console.log(\"current form:\",e.target.imgFIle)\n        let formData = new FormData(e.target)\n        e.target.imgFile.value = null\n        // console.log(formData, \"here is the form\")\n        e.preventDefault();\n        console.log(\"This is here\",details)\n        postImageData(imageUrl+\"/create\", formData).then(async(response)=> {\n            console.log(\"akashaki ::\", response)\n            if(response.success) {\n                console.log(\"response\");\n                setImage(response.response._id)\n            } else {\n                console.log(response)\n                console.log(\"Cannot create\")\n            }\n        })\n        \n       \n    }\n\n    let postImageData = async(url, formData) =>{\n        console.log(formData)\n        let response = await fetch(url, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            // credentials: 'include', // include, *same-origin, omit\n            headers: {\n            //   'Content-Type': 'multipart/form-data',\n              \"Authorization\": JSON.parse(user.accesstoken)\n            //   'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: formData\n          })\n        let resp = await response.json()\n        return resp\n    }\n\n    let transactionUrl = config.baseUrl+\"/api/transactions\"\n    let eventUrl = config.baseUrl + \"/api/events\"\n\n    let submitHandler = async() => {\n        let data = {\n            member: user.id,\n            image: image._id\n        }\n        let response = await fetch(transactionUrl+\"/create\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            // credentials: 'include', // include, *same-origin, omit\n            headers: {\n              'Content-Type': 'application/json',\n              \"Authorization\": JSON.parse(user.accesstoken)\n            //   'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: JSON.stringify(data)\n        })\n        if (response.success) {\n            const registration = {\n                member: user.id,\n                transaction: response.response._id,\n                confirm: false\n            }\n            let registrations = []\n            event.registrations.forEach((registration)=> {\n                registrations.push(registration)\n            })\n            registrations.push(registration)\n            data = {\n                registrations: registrations\n            }\n            response = await fetch(eventUrl+\"/\"+event._id, {\n                method: 'PUT', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                // credentials: 'include', // include, *same-origin, omit\n                headers: {\n                  'Content-Type': 'application/json',\n                  \"Authorization\": JSON.parse(user.accesstoken)\n                //   'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: JSON.stringify(data)\n            })\n        }\n    }\n\n\n    return <>\n        <br></br>\n        <h4>Please pay {event.price} in the below UPI link and attach screenshot to register</h4>\n        <h3><a href={\"upi://pay?pa=\"+event.upiId}>{event.upiId}</a></h3>\n        <form className=\"user\" ref={form2} onSubmit={imageSubmitHandler}>\n                        <div className=\"form-group\">\n                            <input type=\"file\" name=\"imgFile\" className=\"form-control-user\"\n                                id=\"exampleInputEmail\" aria-describedby=\"emailHelp\" onChange={event => handleImageUpload(event)}\n                                placeholder=\"Enter Service Name...\" required></input>\n                        </div>\n                        <button type=\"submit\" onSubmit={imageSubmitHandler} className=\"btn btn-primary btn-user btn-block\">\n                            Upload Image\n                        </button>\n        </form>\n        <form className=\"user2\"  onSubmit={submitHandler}>\n                        <button type=\"submit\" onSubmit={submitHandler} className=\"btn btn-primary btn-user btn-block\">\n                            Submit\n                        </button>\n        </form>\n    </>\n\n\n}\n\nexport default Register"]},"metadata":{},"sourceType":"module"}