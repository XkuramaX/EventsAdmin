{"ast":null,"code":"var _jsxFileName = \"/Users/akashaki/personalProjects/AdminPanel/src/components/events/Events.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport config from '../../config.json';\nimport EventsTableItem from './EventsTableItem';\nimport Create from './Create';\nimport EventPage from './EventPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Events() {\n  _s();\n\n  const [events, setEvents] = useState([]);\n  const [options, setOptions] = useState(0);\n  const [details, setDetails] = useState({});\n  const [types, setTypes] = useState([]);\n  const [selectedEvent, setSelectedEvent] = useState(\"\");\n  const [members, setMembers] = useState([]);\n  let key = JSON.parse(localStorage.getItem(\"apiKey\"));\n  let url = config.baseUrl + \"/api/events\";\n  let typesUrl = config.baseUrl + \"/api/types\";\n  console.log(\"akash I am here\"); // let membersUrl = config.baseUrl+\"/api/members\"\n\n  let fetchData = async url => {\n    let response = await fetch(url, {\n      method: 'GET',\n      // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'include', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": key //   'Content-Type': 'application/x-www-form-urlencoded',\n\n      }\n    });\n    let resp = await response.json();\n    return resp;\n  };\n\n  let postData = async url => {\n    let response = await fetch(url, {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'include', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": key //   'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify(details)\n    });\n    let resp = await response.json();\n    return resp;\n  };\n\n  let putData = async url => {\n    let response = await fetch(url, {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'include', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": key //   'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify(details)\n    });\n    let resp = await response.json();\n    return resp;\n  };\n\n  let deleteData = async id => {\n    let response = await fetch(url + \"/\" + id, {\n      method: 'DELETE',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": key\n      }\n    });\n    setEvents(events.filter(event => event._id !== id));\n  };\n\n  useEffect(() => {\n    fetchData(url + \"/all\").then(async response => {\n      console.log(\"response\", response);\n\n      if (response.success) {\n        console.log(response.response);\n        let resp = response.response;\n        setEvents(resp);\n      } else {\n        console.log(\"unable to fetch data!\");\n      }\n    });\n  }, []);\n  useEffect(() => {\n    fetchData(typesUrl + \"/all\").then(async response => {\n      console.log(\"response\", response);\n\n      if (response.success) {\n        console.log(response.response);\n        setTypes(response.response);\n      } else {\n        console.log(\"unable to fetch data!\");\n      }\n    });\n  }, []);\n\n  let submitHandler = e => {\n    e.preventDefault();\n    console.log(\"This is here\", events);\n    postData(url + \"/create\").then(async response => {\n      if (response.success) {\n        setEvents([...events, response.response]);\n        e.target.name.value = null;\n        e.target.type.value = \"\";\n        e.target.price.value = 0;\n        e.target.description.value = null;\n        setDetails({});\n        setOptions(0);\n      } else {\n        console.log(response);\n        console.log(\"Cannot create\");\n      }\n    });\n  };\n\n  let editHandler = e => {\n    e.preventDefault();\n    console.log(\"This is here\", events);\n    putData(url + \"/\" + selectedEvent._id).then(async response => {\n      if (response.success) {\n        let newEvents = [];\n        events.forEach((event, i) => {\n          if (event._id == selectedEvent._id) {\n            newEvents.push(response.response);\n          } else {\n            newEvents.push(event);\n          }\n        });\n        setEvents(newEvents);\n        setDetails({});\n      } else {\n        console.log(response);\n        console.log(\"Cannot create\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"col-6 btn btn-link\",\n        onClick: () => setOptions(0),\n        children: \"All Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"col-6 btn btn-link\",\n        onClick: () => setOptions(1),\n        children: \"Create Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }, this), options == 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      width: \"100%\",\n      children: events.map(event => /*#__PURE__*/_jsxDEV(EventsTableItem, {\n        item: event,\n        remove: deleteData,\n        setSelectedEvent: setSelectedEvent,\n        deleteUrl: url,\n        setOptions: setOptions\n      }, event._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), options == 1 ? /*#__PURE__*/_jsxDEV(Create, {\n      submitHandler: submitHandler,\n      setDetails: setDetails,\n      details: details,\n      types: types\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), options == 3 ? /*#__PURE__*/_jsxDEV(EventPage, {\n      event: selectedEvent,\n      deleteEvent: deleteData,\n      setPageOptions: setOptions,\n      types: types,\n      details: details,\n      setDetails: setDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Events, \"tm8+G6zto9ef+mBkxK8djxJGCwA=\");\n\n_c = Events;\nexport default Events;\n\nvar _c;\n\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"sources":["/Users/akashaki/personalProjects/AdminPanel/src/components/events/Events.js"],"names":["React","useState","useEffect","config","EventsTableItem","Create","EventPage","Events","events","setEvents","options","setOptions","details","setDetails","types","setTypes","selectedEvent","setSelectedEvent","members","setMembers","key","JSON","parse","localStorage","getItem","url","baseUrl","typesUrl","console","log","fetchData","response","fetch","method","mode","cache","headers","resp","json","postData","body","stringify","putData","deleteData","id","filter","event","_id","then","success","submitHandler","e","preventDefault","target","name","value","type","price","description","editHandler","newEvents","forEach","i","push","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport config from '../../config.json'\nimport EventsTableItem from './EventsTableItem'\nimport Create from './Create'\nimport EventPage from './EventPage'\n\n\nfunction Events() {\n\n    const [events, setEvents] = useState([])\n    const [options, setOptions] = useState(0)\n    const [details, setDetails] = useState({})\n    const [types, setTypes] = useState([])\n    const [selectedEvent, setSelectedEvent] = useState(\"\")\n\n    const [members, setMembers] = useState([])\n\n    let key = JSON.parse(localStorage.getItem(\"apiKey\"))\n\n    let url = config.baseUrl+\"/api/events\"\n    let typesUrl = config.baseUrl+\"/api/types\"\n    console.log(\"akash I am here\");\n    // let membersUrl = config.baseUrl+\"/api/members\"\n\n    let fetchData = async(url) =>{\n        let response = await fetch(url, {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            // credentials: 'include', // include, *same-origin, omit\n            headers: {\n              'Content-Type': 'application/json',\n              \"Authorization\": key\n            //   'Content-Type': 'application/x-www-form-urlencoded',\n            },\n          })\n        let resp = await response.json()\n        return resp\n    }\n\n    let postData = async(url) =>{\n        let response = await fetch(url, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            // credentials: 'include', // include, *same-origin, omit\n            headers: {\n              'Content-Type': 'application/json',\n              \"Authorization\": key\n            //   'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: JSON.stringify(details)\n          })\n        let resp = await response.json()\n        return resp\n    }\n\n    let putData = async(url) =>{\n        let response = await fetch(url, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            // credentials: 'include', // include, *same-origin, omit\n            headers: {\n              'Content-Type': 'application/json',\n              \"Authorization\": key\n            //   'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: JSON.stringify(details)\n          })\n        let resp = await response.json()\n        return resp\n    }\n\n    let deleteData = async(id) => {\n        let response = await fetch(url+\"/\"+id, {\n            method: 'DELETE',\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Authorization\": key\n            }\n        })\n        setEvents(events.filter((event)=>event._id!==id))\n    }\n\n    useEffect(()=>{\n        fetchData(url+\"/all\").then(async(response)=>{\n            console.log(\"response\",response)\n            if (response.success){\n                console.log(response.response)\n                let resp = response.response\n                setEvents(resp)\n            } else {\n                console.log(\"unable to fetch data!\")\n            }\n            \n        })\n    }, [])\n\n    useEffect(()=>{\n        fetchData(typesUrl+\"/all\").then(async(response)=>{\n            console.log(\"response\",response)\n            if (response.success){\n                console.log(response.response)\n                setTypes(response.response)\n            } else {\n                console.log(\"unable to fetch data!\")\n            }\n            \n        })\n    }, [])\n\n    let submitHandler = (e) => {\n        e.preventDefault();\n        console.log(\"This is here\",events)\n        postData(url+\"/create\").then(async(response)=> {\n            if(response.success) {\n                setEvents([...events,response.response])\n                e.target.name.value = null\n                e.target.type.value = \"\"\n                e.target.price.value = 0\n                e.target.description.value = null\n                setDetails({})\n                setOptions(0)\n            } else {\n                console.log(response)\n                console.log(\"Cannot create\")\n            }\n            \n        })\n    }\n\n    let editHandler = (e) => {\n        e.preventDefault();\n        console.log(\"This is here\",events)\n        putData(url+\"/\"+selectedEvent._id).then(async(response)=> {\n            if(response.success) {\n                let newEvents = []\n                events.forEach((event, i) => {\n                    if (event._id == selectedEvent._id) {\n                        newEvents.push(response.response)\n                    } else {\n                        newEvents.push(event)\n                    }\n                })\n                setEvents(newEvents)\n                setDetails({})\n            } else {\n                console.log(response)\n                console.log(\"Cannot create\")\n            }\n            \n        })\n    }\n\n    return (\n        <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <button className=\"col-6 btn btn-link\" onClick={()=>setOptions(0)}>All Events</button>\n                    <button className=\"col-6 btn btn-link\" onClick={()=>setOptions(1)}>Create Event</button>\n                </div>\n                {options==0? <div className=\"container\" width=\"100%\">{events.map((event) => \n                <EventsTableItem key={event._id} item={event} remove={deleteData} setSelectedEvent={setSelectedEvent} deleteUrl={url} setOptions={setOptions}></EventsTableItem>\n                )}</div>:<></>}\n                {options==1? <Create submitHandler={submitHandler} setDetails={setDetails} details={details} types={types}></Create>:<></>}   \n                {options==3? <EventPage event={selectedEvent} deleteEvent={deleteData} setPageOptions={setOptions} types={types} details={details} setDetails={setDetails}></EventPage>:<></>}\n        </div>)\n}\n\nexport default Events"]},"metadata":{},"sourceType":"module"}